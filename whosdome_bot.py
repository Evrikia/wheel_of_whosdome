from telebot import TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from collections import defaultdict
import threading
import random
import html

API_TOKEN = ''
bot = TeleBot(API_TOKEN)

game_players = defaultdict(set)
message_tracker = {}
game_state = defaultdict(lambda: "idle")  # There 3 game states - idle, registering, playing
registration_timers = {}
game_mode = {}  # There are 2 game modes - intrigue and non-intrigue
chat_questions = {}  # list of questions uploaded from files questions.txt and questions1.txt (depends on game mode)

def load_questions_from_file(filename):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return [line.strip() for line in f if line.strip()]
    except Exception as e:
        print(f"{e}")
        return []

@bot.message_handler(func=lambda message: message.chat.type == 'private')
def block_private_usage(message):
    bot.send_message(message.chat.id, "‚ûï –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É, –∏ —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞ –º—ã —Å–º–æ–∂–µ–º –∏–≥—Ä–∞—Ç—å!")

@bot.message_handler(commands=['start_game'])
def handle_start_game(message):
    chat_id = message.chat.id
    try:
        bot.delete_message(chat_id, message.message_id)
    except:
        pass
    if message.chat.type not in ['group', 'supergroup']:
        bot.send_message(chat_id, "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return
    if game_state[chat_id] in ("registering", "playing"):
        sent_msg = bot.send_message(chat_id, "‚ö†Ô∏è –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /reset_game –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π.")
        threading.Timer(5.0, lambda: bot.delete_message(chat_id, sent_msg.message_id)).start()
        return
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üé≠ –ò–Ω—Ç—Ä–∏–≥–∞", callback_data=f"mode:intrigue:{chat_id}"),
        InlineKeyboardButton("üé≤ –û–±—ã—á–Ω–∞—è", callback_data=f"mode:non-intrigue:{chat_id}")
    )
    bot.send_message(chat_id, "üïπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("mode:"))
def handle_mode_selection(call):
    try:
        _, mode, chat_id = call.data.split(":")
        chat_id = int(chat_id)
    except:
        return
    if game_state[chat_id] != "idle":
        bot.answer_callback_query(call.id, text="–ò–≥—Ä–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return
    game_mode[chat_id] = mode
    game_state[chat_id] = "registering"
    filename = "questions1.txt" if mode == "intrigue" else "questions.txt"
    chat_questions[chat_id] = load_questions_from_file(filename)
    game_players[chat_id].clear()
    timer = registration_timers.get(chat_id)
    if timer:
        timer.cancel()
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=f"join:{chat_id}"))
    msg = bot.send_message(chat_id, build_player_list(chat_id), reply_markup=markup)
    message_tracker[chat_id] = msg.message_id
    bot.answer_callback_query(call.id, text="‚úÖ –†–µ–∂–∏–º –≤—ã–±—Ä–∞–Ω. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å!")
    timer = threading.Timer(60.0, auto_start_game, args=(chat_id,))
    registration_timers[chat_id] = timer
    timer.start()

@bot.callback_query_handler(func=lambda call: call.data.startswith("join:"))
def handle_join_callback(call):
    chat_id = int(call.data.split(":")[1])
    user = call.from_user
    if game_state.get(chat_id) != "registering":
        bot.answer_callback_query(call.id, text="‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞.")
        return
    player = (user.id, user.full_name)
    if player in game_players[chat_id]:
        bot.answer_callback_query(call.id, text="‚úÖ –¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")
        return
    game_players[chat_id].add(player)
    try:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=f"join:{chat_id}"))
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_tracker[chat_id],
            text=build_player_list(chat_id),
            reply_markup=markup
        )
    except Exception as e:
        print(f"[ERROR] Failed to edit message: {e}")
    bot.answer_callback_query(call.id, text="‚úÖ –¢—ã –≤ –∏–≥—Ä–µ!")

@bot.message_handler(commands=['join_game'])
def join_game_after_registration(message):
    chat_id = message.chat.id
    user = message.from_user
    try:
        bot.delete_message(chat_id, message.message_id)
    except:
        pass
    if game_state.get(chat_id) != "playing":
        sent_msg = bot.send_message(chat_id, "‚ö†Ô∏è –ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –°–µ–π—á–∞—Å –º–æ–∂–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")
        threading.Timer(5.0, lambda: bot.delete_message(chat_id, sent_msg.message_id)).start()
        return
    player = (user.id, user.full_name)
    if player in game_players[chat_id]:
        sent_msg = bot.send_message(chat_id, "‚úÖ –¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")
        threading.Timer(5.0, lambda: bot.delete_message(chat_id, sent_msg.message_id)).start()
    else:
        game_players[chat_id].add(player)
        bot.send_message(chat_id, f"üéÆ {user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!")

@bot.message_handler(commands=['leave_game'])
def leave_game(message):
    chat_id = message.chat.id
    user = message.from_user
    try:
        bot.delete_message(chat_id, message.message_id)
    except:
        pass
    if game_state.get(chat_id) != "playing":
        sent_msg = bot.send_message(chat_id, "‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ –∏–¥—ë—Ç. –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–π—Ç–∏.")
        threading.Timer(5.0, lambda: bot.delete_message(chat_id, sent_msg.message_id)).start()
        return
    player = (user.id, user.full_name)
    if player in game_players[chat_id]:
        game_players[chat_id].remove(player)
        bot.send_message(chat_id, f"üëã {user.full_name} –ø–æ–∫–∏–Ω—É–ª(–∞) –∏–≥—Ä—É.")
    else:
        bot.send_message(chat_id, "‚ùå –¢—ã –Ω–µ –≤ –∏–≥—Ä–µ.")

@bot.message_handler(commands=['members'])
def show_members_count(message):
    chat_id = message.chat.id
    try:
        bot.delete_message(chat_id, message.message_id)
    except:
        pass
    if game_state.get(chat_id) != "playing":
        sent_msg = bot.send_message(chat_id, "‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ –∏–¥—ë—Ç. –ö–æ–º–∞–Ω–¥–∞ /members –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã.")
        threading.Timer(5.0, lambda: bot.delete_message(chat_id, sent_msg.message_id)).start()
        return
    count = len(game_players.get(chat_id, set()))
    bot.send_message(chat_id, f"üë• –°–µ–π—á–∞—Å –≤ –∏–≥—Ä–µ {count} —É—á–∞—Å—Ç–Ω–∏–∫(–æ–≤).")

@bot.message_handler(commands=['question'])
def send_random_question(message):
    chat_id = message.chat.id
    try:
        bot.delete_message(chat_id, message.message_id)
    except:
        pass
    if game_state.get(chat_id) != "playing":
        sent_msg = bot.send_message(chat_id, "‚ö†Ô∏è –ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        threading.Timer(5.0, lambda: bot.delete_message(chat_id, sent_msg.message_id)).start()
        return
    result = pick_random_question(chat_id)
    bot.send_message(chat_id, result, parse_mode="HTML")

@bot.message_handler(commands=['reset_game'])
def reset_game(message):
    chat_id = message.chat.id
    try:
        bot.delete_message(chat_id, message.message_id)
    except:
        pass
    if game_state[chat_id] == "idle":
        sent_msg = bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è —Å–±—Ä–æ—Å–∞.")
        threading.Timer(5.0, lambda: bot.delete_message(chat_id, sent_msg.message_id)).start()
        return
    game_players[chat_id].clear()
    game_state[chat_id] = "idle"
    message_tracker.pop(chat_id, None)
    game_mode.pop(chat_id, None)
    chat_questions.pop(chat_id, None)
    timer = registration_timers.get(chat_id)
    if timer:
        timer.cancel()
        registration_timers.pop(chat_id, None)
    sent_msg = bot.send_message(chat_id, "‚ôªÔ∏è –ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start_game")
    #threading.Timer(5.0, lambda: bot.delete_message(chat_id, sent_msg.message_id)).start()

@bot.message_handler(commands=['instructions'])
def show_instructions(message):
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except:
        pass
    instructions = (
        "üìò <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n\n"
        "‚Ä¢ /start_game - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É –∏ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º\n"
        "‚Ä¢ /join_game - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ (–≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã)\n"
        "‚Ä¢ /leave_game - –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É (–≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã)\n"
        "‚Ä¢ /members - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã)\n"
        "‚Ä¢ /question - –∑–∞–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å–ª—É—á–∞–π–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É\n"
        "‚Ä¢ /reset_game - —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É\n"
        "‚Ä¢ /instructions - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
    )
    bot.send_message(message.chat.id, instructions, parse_mode="HTML")

def auto_reset_game(chat_id):
    game_players[chat_id].clear()
    game_state[chat_id] = "idle"
    message_tracker.pop(chat_id, None)
    game_mode.pop(chat_id, None)
    chat_questions.pop(chat_id, None)
    timer = registration_timers.get(chat_id)
    if timer:
        timer.cancel()
        registration_timers.pop(chat_id, None)
    try:
        bot.send_message(chat_id, "‚ôªÔ∏è –ò–≥—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–æ—à–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤.")
    except Exception as e:
        print(f"[ERROR] Failed to notify auto-reset: {e}")

def auto_start_game(chat_id):
    players = game_players.get(chat_id, set())
    if len(players) < 1:
        auto_reset_game(chat_id)
        return
    game_state[chat_id] = "playing"
    timer = registration_timers.get(chat_id)
    if timer:
        timer.cancel()
        registration_timers.pop(chat_id, None)
    text = build_player_list(chat_id)
    text += (
        "\n\nüöÄ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /question, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset_game, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É.\n"
        "–ö–æ–º–∞–Ω–¥–∞ /join_game –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–æ–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.\n"
        "–ö–æ–º–∞–Ω–¥–∞ /leave_game –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã."
    )
    try:
        bot.edit_message_text(chat_id=chat_id, message_id=message_tracker[chat_id], text=text)
    except Exception as e:
        print(f"[ERROR] Failed to start game in chat {chat_id}: {e}")

def build_player_list(chat_id):
    players = game_players.get(chat_id, set())
    if not players:
        return "üéØ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!"
    return "üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:\n" + "\n".join([f"‚Ä¢ {html.escape(name)}" for _, name in players])

def pick_random_question(chat_id):
    players = game_players.get(chat_id, set())
    questions = chat_questions.get(chat_id, [])
    if not players or not questions:
        return "üòê –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤."
    user_id, random_name = random.choice(list(players))
    question = random.choice(questions)
    mention = f'<a href="tg://user?id={user_id}">{html.escape(random_name)}</a>'
    return f"üé≤ –í–æ–ø—Ä–æ—Å –¥–ª—è: {mention}\n\n<i>{html.escape(question)}</i>"

bot.infinity_polling()
